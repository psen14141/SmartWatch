#pragma checksum "E:\ProstyleTechnology\smart-watch\Solution\SmartWatch\Areas\UserHealthReports\Views\UserHealthReport\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a86f396651d47964b99f65c18c3a8ba62f1293df"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_UserHealthReports_Views_UserHealthReport_Index), @"mvc.1.0.view", @"/Areas/UserHealthReports/Views/UserHealthReport/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a86f396651d47964b99f65c18c3a8ba62f1293df", @"/Areas/UserHealthReports/Views/UserHealthReport/Index.cshtml")]
    public class Areas_UserHealthReports_Views_UserHealthReport_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<SmartWatch.DbModels.HeartRate>>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "E:\ProstyleTechnology\smart-watch\Solution\SmartWatch\Areas\UserHealthReports\Views\UserHealthReport\Index.cshtml"
  
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a86f396651d47964b99f65c18c3a8ba62f1293df3073", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"" src=""assets/js/jquery-3.4.0.min.js""></script>
    <!-- Bootstrap tooltips -->
    <script type=""text/javascript"" src=""assets/js/popper.min.js""></script>
    <!-- Bootstrap core JavaScript -->
    <script type=""text/javascript"" src=""assets/js/bootstrap.min.js""></script>
    <!-- MDB core JavaScript -->
    <script type=""text/javascript"" src=""assets/js/mdb.min.js""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"






<div class=""container-fluid"">
    <div class=""row"">
        <div class=""col-lg-6"">

            <h5 class=""panel-title""><center>HEART RATE </h5>


            <canvas id=""lineChart""></canvas>
            <script>
                var today = new Date();
                var time = today.getHours() + "":"" + today.getMinutes() + "":"" + today.getSeconds();
                var ctxL = document.getElementById(""lineChart"").getContext('2d');
                var myLineChart = new Chart(ctxL, {
                    type: 'line',
                    data:
                    {
                        labels: [time],
                        datasets: [{
                            label: ""Blood Rate"",
                            fill: false,
                            lineTension: 0.1,
                            backgroundColor: ""rgba(255,0,0,1.00)"",
                            borderColor: ""rgba(255,0,0,1.00)"",
                            borderCapStyle: 'butt',
                       ");
            WriteLiteral(@"     borderDash: [],
                            borderDashOffset: 0.0,
                            borderJoinStyle: 'miter',
                            pointBorderColor: ""rgba(255,0,0,1.00)"",
                            pointBackgroundColor: ""#fff"",
                            pointBorderWidth: 1,
                            pointHoverRadius: 5,
                            pointHoverBackgroundColor: ""rgba(255,0,0,1.00)"",
                            pointHoverBorderColor: ""rgba(255,0,0,1.00)"",
                            pointHoverBorderWidth: 2,
                            pointRadius: 1,
                            pointHitRadius: 10,
                            data: [],
                            spanGaps: false,
                        }
                        ]
                    },
                    options:
                    {
                        responsive: true
                    }
                });
                function add_data() {
                    var j");
            WriteLiteral(@"son_url = ""/UserHealthReports/UserHealthReport/GetHeartRateData"";
                    var data1 = data1 || {};

                    $.getJSON(json_url, data1).done(function (response) {
                        //alert(JSON.stringify(response));
                        myLineChart.data.labels = response.labels;
                        myLineChart.data.datasets[0].data = response.data.heartRate; // or you can iterate for multiple datasets
                        myLineChart.update(); // finally update our chart
                    });

                }
                setInterval(add_data, 1000); //milisecond
            </script>
        </div>
        <div class=""col-lg-6"">
            <h5 class=""panel-title""><center>BODY TEMPERATURE </h5>


            <canvas id=""myChartTemp""></canvas>
            <script>
                var today = new Date();
                var time = today.getHours() + "":"" + today.getMinutes() + "":"" + today.getSeconds();
                var ctxL = document.getEle");
            WriteLiteral(@"mentById(""myChartTemp"").getContext('2d');
                var myLineChartT = new Chart(ctxL, {
                    type: 'line',
                    data:
                    {
                        labels: [time],
                        datasets: [{
                            label: ""Body Temperature"",
                            fill: false,
                            lineTension: 0.1,
                            backgroundColor: ""rgba(255,0,0,1.00)"",
                            borderColor: ""rgba(255,0,0,1.00)"",
                            borderCapStyle: 'butt',
                            borderDash: [],
                            borderDashOffset: 0.0,
                            borderJoinStyle: 'miter',
                            pointBorderColor: ""rgba(255,0,0,1.00)"",
                            pointBackgroundColor: ""#fff"",
                            pointBorderWidth: 1,
                            pointHoverRadius: 5,
                            pointHoverBackgroundColor");
            WriteLiteral(@": ""rgba(255,0,0,1.00)"",
                            pointHoverBorderColor: ""rgba(255,0,0,1.00)"",
                            pointHoverBorderWidth: 2,
                            pointRadius: 1,
                            pointHitRadius: 10,
                            data: [],
                            spanGaps: false,
                        }
                        ]
                    },
                    options:
                    {
                        responsive: true
                    }
                });
                function add_data1() {
                    var json_url = ""/UserHealthReports/UserHealthReport/GetBTemperatureData"";
                    var data1 = data1 || {};

                    $.getJSON(json_url, data1).done(function (response) {
                        //alert(JSON.stringify(response));
                        myLineChartT.data.labels = response.labels;
                        myLineChartT.data.datasets[0].data = response.data.BTemperature");
            WriteLiteral(@"; // or you can iterate for multiple datasets
                        myLineChartT.update(); // finally update our chart
                    });

                }
                setInterval(add_data1, 1000); //milisecond
            </script>
        </div>
    </div>

");
            WriteLiteral(@"
    <div class=""row"">
        <div class=""col-lg-6"">

            <h5 class=""panel-title""><center>STEP COUNT </h5>


            <canvas id=""lineChartsteps""></canvas>
            <script>
                var today = new Date();
                var time = today.getHours() + "":"" + today.getMinutes() + "":"" + today.getSeconds();
                var ctxL = document.getElementById(""lineChartsteps"").getContext('2d');
                var myLineChartsteps = new Chart(ctxL, {
                    type: 'line',
                    data:
                    {
                        labels: [time],
                        datasets: [{
                            label: ""Step Count"",
                            fill: false,
                            lineTension: 0.1,
                            backgroundColor: ""rgba(255,0,0,1.00)"",
                            borderColor: ""rgba(255,0,0,1.00)"",
                            borderCapStyle: 'butt',
                            borderDash: [],
      ");
            WriteLiteral(@"                      borderDashOffset: 0.0,
                            borderJoinStyle: 'miter',
                            pointBorderColor: ""rgba(255,0,0,1.00)"",
                            pointBackgroundColor: ""#fff"",
                            pointBorderWidth: 1,
                            pointHoverRadius: 5,
                            pointHoverBackgroundColor: ""rgba(255,0,0,1.00)"",
                            pointHoverBorderColor: ""rgba(255,0,0,1.00)"",
                            pointHoverBorderWidth: 2,
                            pointRadius: 1,
                            pointHitRadius: 10,
                            data: [],
                            spanGaps: false,
                        }
                        ]
                    },
                    options:
                    {
                        responsive: true
                    }
                });
                function add_data2() {
                    var json_url = ""/UserHealthRepor");
            WriteLiteral(@"ts/UserHealthReport/GetStepCountData"";
                    var data1 = data1 || {};

                    $.getJSON(json_url, data1).done(function (response) {
                        //alert(JSON.stringify(response));
                        myLineChartsteps.data.labels = response.labels;
                        myLineChartsteps.data.datasets[0].data = response.data.stepCount; // or you can iterate for multiple datasets
                        myLineChartsteps.update(); // finally update our chart
                    });

                }
                setInterval(add_data2, 1000); //milisecond
            </script>
        </div>
        <div class=""col-lg-6"">
            <h5 class=""panel-title""><center>BLOOD PRESSURE </h5>


            <canvas id=""myChartBPressure""></canvas>
            <script>
                var today = new Date();
                var time = today.getHours() + "":"" + today.getMinutes() + "":"" + today.getSeconds();
                var ctxL = document.getElementById");
            WriteLiteral(@"(""myChartBPressure"").getContext('2d');
                var myLineChartBP = new Chart(ctxL, {
                    type: 'line',
                    data:
                    {
                        labels: [time],
                        datasets: [{
                            label: ""Blood Pressure Upper"",
                            fill: false,
                            lineTension: 0.1,
                            backgroundColor: ""rgba(255,0,0,1.00)"",
                            borderColor: ""rgba(255,0,0,1.00)"",
                            borderCapStyle: 'butt',
                            borderDash: [],
                            borderDashOffset: 0.0,
                            borderJoinStyle: 'miter',
                            pointBorderColor: ""rgba(255,0,0,1.00)"",
                            pointBackgroundColor: ""#fff"",
                            pointBorderWidth: 1,
                            pointHoverRadius: 5,
                            pointHoverBackgroundCol");
            WriteLiteral(@"or: ""rgba(255,0,0,1.00)"",
                            pointHoverBorderColor: ""rgba(255,0,0,1.00)"",
                            pointHoverBorderWidth: 2,
                            pointRadius: 1,
                            pointHitRadius: 10,
                            data: [],
                            spanGaps: false,
                        },
                            {
                                label: ""Blood Pressure Lower"",
                                fill: false,
                                lineTension: 0.1,
                                backgroundColor: ""rgba(0,0,255,1.00)"",
                                borderColor: ""rgba(0,0,255,1.00)"",
                                borderCapStyle: 'butt',
                                borderDash: [],
                                borderDashOffset: 0.0,
                                borderJoinStyle: 'miter',
                                pointBorderColor: ""rgba(0,0,255,1.00)"",
                                poi");
            WriteLiteral(@"ntBackgroundColor: ""#fff"",
                                pointBorderWidth: 1,
                                pointHoverRadius: 5,
                                pointHoverBackgroundColor: ""rgba(0,0,255,1.00)"",
                                pointHoverBorderColor: ""rgba(0,0,255,1.00)"",
                                pointHoverBorderWidth: 2,
                                pointRadius: 1,
                                pointHitRadius: 10,
                                //data: BloodPressureLower,
                                data: [],
                                spanGaps: false,
                            }
                        ]
                    },
                    options:
                    {
                        responsive: true
                    }
                });
                function add_data3() {
                    var json_url = ""/UserHealthReports/UserHealthReport/GetBloodPressureData"";
                    var data1 = data1 || {};

        ");
            WriteLiteral(@"            $.getJSON(json_url, data1).done(function (response) {
                        //alert(JSON.stringify(response));
                        myLineChartBP.data.labels = response.labels;
                        myLineChartBP.data.datasets[0].data = response.data.BPressure;
                        myLineChartBP.data.datasets[1].data = response.data.BPL;// or you can iterate for multiple datasets
                        myLineChartBP.update(); // finally update our chart
                    });

                }
                setInterval(add_data3, 1000); //milisecond
            </script>
        </div>
    </div>




</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<SmartWatch.DbModels.HeartRate>> Html { get; private set; }
    }
}
#pragma warning restore 1591
